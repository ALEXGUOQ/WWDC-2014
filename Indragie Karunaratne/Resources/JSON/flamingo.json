[
	{
		"className": "INDCollectionImageElement",
		"imageName": "flamingo-hero",
		"bigImageName": "flamingo-big"
	},
	{
		"className": "INDCollectionTextElement",
		"html": "<div style='font-family: Merriweather; font-size: 13pt; text-align: center;'><strong>Instant messaging</strong> on the desktop has seen no significant improvement for <em>the last decade</em>.<br /><br /><span style='font-size: 10pt;'>Designer <strong>Christian Dalonzo</strong> and I set out to change that by building Flamingo, a beautifully modern instant messaging app for OS X.</span></div>",
		"lineSpacing": 3
	},
	{
		"className": "INDCollectionButtonElement",
		"title": "View Product Website",
		"url" : "http://flamingo.im"
	},
	{
		"className": "INDCollectionImageElement",
		"imageName": "separator"
	},
	{
		"className": "INDCollectionImageElement",
		"imageName": "flamingo-feature"
	},
	{
		"className": "INDCollectionImageElement",
		"imageName": "separator"
	},
	{
		"className": "INDCollectionTextElement",
		"html": "<div style='font-family: Merriweather; font-size: 13pt; text-align: center;'>It's all about <em>attention to detail</em>.<br /><br /><span style='font-size: 10pt;'>When I started building Flamingo, I didn't have the tools I needed to build the interactions and fluid UI that we were trying to achieve. So I built them.<br /><br />A friend and I collaborated on <strong>Butter</strong>, a framework that implemented CALayer-backed versions of many AppKit controls. Flamingo is the first production application with a UI implemented largely on Butter.<br /><br />Butter gave me a solid foundation to work with, but Flamingo's entirely custom UI was a massive undertaking on its own. Every control was designed and implemented meticulously. Even things like preferences switches.</span></div>",
		"lineSpacing": 3
	},
	{
		"className": "INDCollectionVideoElement",
		"videoFilename": "flamingo.mp4"
	},
	{
		"className": "INDCollectionTextElement",
		"html": "<div style='font-family: Merriweather; font-size: 12pt; text-align: center;'>&ldquo;Not only is Flamingo intricately designed with modern interface elements and superb use of colors, it also features some fantastically executed animations and transitions that make it an absolutely delight to use.&rdquo;<br /><br /><span style='font-size: 10pt; color: #7e7e7e;'>&mdash; Preshit Deorukhkar, Beautiful Pixels</span></div>",
		"lineSpacing": 3
	},
	{
		"className": "INDCollectionImageElement",
		"imageName": "separator"
	},
	{
		"className": "INDCollectionTextElement",
		"html": "<div style='font-family: Merriweather; font-size: 13pt; text-align: center;'>Signals, signals, signals.</div>",
		"lineSpacing": 3
	},
	{
		"className": "INDCollectionImageElement",
		"imageName": "reactivecocoa"
	},
	{
		"className": "INDCollectionTextElement",
		"html": "<div style='font-family: Merriweather; font-size: 10pt; text-align: center;'>The development process of Flamingo also introduced me to <strong>functional reactive programming</strong>, which emphasizes declarative programming, functional composition, and the reduction of state by explicitly modeling time. The particular implementation I used was the popular <strong>ReactiveCocoa</strong> project.<br /><br />The fundamental building block of ReactiveCocoa is a <em>signal</em>, which represents a stream of values changing over time. Flamingo uses signals for everything, from communication with XMPP servers to handling the roster model and even UI related things like layout and animations.</div>",
		"lineSpacing": 3
	},
	{
		"className": "INDCollectionImageElement",
		"imageName": "separator"
	},
]
